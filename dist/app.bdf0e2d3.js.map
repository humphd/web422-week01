{"version":3,"sources":["users.js","dom.js","profile.js","app.js"],"names":["apiUrl","load","url","fetch","then","res","ok","Error","status","json","results","data","catch","err","console","warn","module","exports","createImg","alt","img","Image","src","className","width","height","createName","value","h2","document","createElement","innerText","createEmail","link","href","innerHTML","h3","appendChild","createUserInfo","name","email","userInfoEl","nameEl","emailEl","createCard","id","avatarUrl","section","imgEl","require","Profile","user","first_name","last_name","avatar","users","init","main","querySelector","length","forEach","profile","profileEl","render","window","onload"],"mappings":"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","file":"app.bdf0e2d3.js","sourceRoot":"..","sourcesContent":["const apiUrl = 'https://reqres.in/api';\n\nfunction load() {\n  const url = `${apiUrl}/users`;\n\n  return fetch(url)\n    .then(res => {\n      if(!res.ok) {\n        throw new Error(`API returned status code ${res.status}`);\n      }\n\n      return res.json();\n    })\n    .then(results => results.data)\n    .catch(err => {\n      console.warn(err);\n\n      // We have no users to process, return an empty array\n      return [];\n    });\n}\n\nmodule.exports.load = load;\n","// Create an <img> element for the profile's avatar\nfunction createImg(url, alt) {\n  const img = new Image();\n\n  img.src = url;\n  img.alt = alt;\n  img.className = 'avatar';\n  img.width = 128;\n  img.height = 128;\n\n  return img;\n}\n\n// Create an <h2> element for the profile's name\nfunction createName(value) {\n  const h2 = document.createElement('h2');\n  h2.innerText = value;\n  return h2;\n}\n\n// Create an <h3><a>...</a></h3> element for the profile's email\nfunction createEmail(value) {\n  const link = document.createElement('a');\n  link.href=`mailto:${value}`;\n  link.innerHTML = value;\n\n  const h3 = document.createElement('h3');\n  h3.appendChild(link);\n  return h3;\n}\n\n// Create and combine the name and email elements together in a <div>\nfunction createUserInfo(name, email) {\n  const userInfoEl = document.createElement('div');\n  userInfoEl.className = 'user-info';\n\n  const nameEl = createName(name);\n  const emailEl = createEmail(email);\n\n  userInfoEl.appendChild(nameEl);\n  userInfoEl.appendChild(emailEl);\n\n  return userInfoEl;\n}\n\n// Create the entire profile card, with img, name, email etc.\nfunction createCard(id, name, email, avatarUrl) {\n  const section = document.createElement('section');\n  section.id = `user-${id}`;\n  section.className = 'profile-card';\n\n  const imgEl = createImg(avatarUrl, name);\n  const userInfoEl = createUserInfo(name, email);\n\n  section.appendChild(imgEl);\n  section.appendChild(userInfoEl);\n\n  return section;\n}\n\nmodule.exports.createImg = createImg;\nmodule.exports.createName = createName;\nmodule.exports.createEmail = createEmail;\nmodule.exports.createUserInfo = createUserInfo;\nmodule.exports.createCard = createCard;\n","// All of our DOM related code lives in dom.js and we only need createCard() here.\nconst { createCard } = require('./dom');\n\n// The Profile class defines an Object template we'll use to work with profile data\nclass Profile {\n  // We accept the relevant data for a profile via the constructor\n  constructor(user) {\n    this.id = user.id;\n    this.name = `${user.first_name} ${user.last_name}`;\n    this.email = user.email;\n    this.avatarUrl = user.avatar;\n  }\n\n  // Create a DOM node representing this user profile with image, name, email\n  render() {\n    return createCard(this.id, this.name, this.email, this.avatarUrl)\n  }\n}\n\nmodule.exports = Profile;\n","const users = require('./users');\nconst Profile = require('./profile');\n\nfunction init() {\n  // Safe to query for DOM nodes now that window is loaded\n  const main = document.querySelector('main');\n\n  // Load all users from web API as JSON and process into DOM nodes\n  users.load()\n    // We have to wait for the fetch() response's Promise to complete\n    .then(users => {\n      // If we couldn't load any users, indicate that\n      if(!(users && users.length)) {\n        main.innerHTML = 'Unable to load user data at this time.';\n        return;\n      }\n\n      // Otherwise, iterate across all the users\n      users.forEach(user => {\n        // Turn each raw User object into a Profile object\n        const profile = new Profile(user);\n\n        // Use the Profile object to create a tree of DOM nodes\n        const profileEl = profile.render();\n\n        // Append these DOM nodes to our document's main element\n        main.appendChild(profileEl);\n      })\n    });\n}\n\nwindow.onload = init;\n"]}